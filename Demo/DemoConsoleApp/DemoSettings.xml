<?xml version="1.0" encoding="UTF-8"?>
<demo dataFolder=".\\Data">

  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following straightforward configuration of the StateMachine exhibits 88.29% accuracy, slightly better than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
    Demo note: The first 400 instances in ProximalPhalanxOutlineAgeGroup.csv are for network learning and the last 205 instances for verification.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: Simple pure ESN reservoir generating FiringFadingSum and Activation predictors, one Elliot neuron as a classifier (Resilient trainer)">
    <samples fileName="ProximalPhalanxOutlineAgeGroup.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="205">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="true"/>
          <external>
            <field name="Outline">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="10" dimY="6" dimZ="6">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="AnalogOnly">
                    <activationTanH/>
                    <firingThreshold value="0.002"/>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="AnalogOnly">
                    <activationTanH/>
                    <firingThreshold value="0.002"/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="Outline" poolName="PureESN" density="1" signalingRestriction="AnalogOnly">
                <synapse delayMethod="Random" maxDelay="4">
                  <analogTarget scope="Excitatory">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="true"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.25" folds="Auto">
        <readoutUnit name="0-6 years">
          <classification oneWinnerGroupName="AgeGroup">
            <binFeature/>
          </classification>
          <ff>
            <activationElliot/>
            <resPropTrainer attempts="10" attemptEpochs="500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="7-12 years">
          <classification oneWinnerGroupName="AgeGroup">
            <binFeature/>
          </classification>
          <ff>
            <activationElliot/>
            <resPropTrainer attempts="10" attemptEpochs="500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="13-19 years">
          <classification oneWinnerGroupName="AgeGroup">
            <binFeature/>
          </classification>
          <ff>
            <activationElliot/>
            <resPropTrainer attempts="10" attemptEpochs="500"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>

  
  <!--
    This demo case demonstrates successful use of mixed analog and spiking neurons. Analog neurons get analog input, spiking neurons
    get spike-train spikes.
    Following configuration of the StateMachine exhibits 88.29% accuracy, slightly better than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
    Demo note: The first 400 instances in ProximalPhalanxOutlineAgeGroup.csv are for network learning and the last 205 instances for verification.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: Mixed reservoir generating FiringFadingSum and Activation predictors, one Elliot neuron as a classifier (Resilient trainer)">
    <samples fileName="ProximalPhalanxOutlineAgeGroup.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="205">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="true"/>
          <external>
            <field name="Outline" spikeTrainLength="5">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="AnalogPool" dimX="6" dimY="6" dimZ="5">
                <neuronGroups>
                  <analogGroup name="Exc-grp-analog" role="Excitatory" relShare="1" readoutDensity="1">
                    <activationTanH/>
                  </analogGroup>
                  <analogGroup name="Inh-grp-analog" role="Inhibitory" relShare="1" readoutDensity="1">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" avgDistance="NA" allowSelfConnection="false">
                  <synapse/>
                </interconnection>
              </pool>
              <pool name="SpikingPool" dimX="6" dimY="6" dimZ="5">
                <neuronGroups>
                  <spikingGroup name="Exc-grp-spiking" role="Excitatory" relShare="4" readoutDensity="1">
                    <activationSimpleIF refractoryPeriods="0"/>
                  </spikingGroup>
                  <spikingGroup name="Inh-grp-spiking" role="Inhibitory" relShare="1" readoutDensity="1">
                    <activationSimpleIF refractoryPeriods="0"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection density="0.3" avgDistance="NA" allowSelfConnection="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <pool2PoolConns>
              <pool2PoolConn srcPool="AnalogPool" srcConnDensity="1" targetPool="SpikingPool" targetConnDensity="0.05">
                <synapse/>
              </pool2PoolConn>
            </pool2PoolConns>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="Outline" poolName="AnalogPool" density="1" signalingRestriction="NoRestriction">
                <synapse delayMethod="Random" maxDelay="10">
                  <analogTarget scope="Excitatory">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="Outline" poolName="SpikingPool" density="1" signalingRestriction="NoRestriction">
                <synapse delayMethod="Random" maxDelay="10">
                  <spikingTarget scope="Excitatory">
                    <weight min="0" max="1"/>
                  </spikingTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="true"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.25" folds="Auto">
        <readoutUnit name="0-6 years">
          <classification oneWinnerGroupName="AgeGroup">
            <binFeature/>
          </classification>
          <ff>
            <activationElliot/>
            <resPropTrainer attempts="10" attemptEpochs="500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="7-12 years">
          <classification oneWinnerGroupName="AgeGroup">
            <binFeature/>
          </classification>
          <ff>
            <activationElliot/>
            <resPropTrainer attempts="10" attemptEpochs="500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="13-19 years">
          <classification oneWinnerGroupName="AgeGroup">
            <binFeature/>
          </classification>
          <ff>
            <activationElliot/>
            <resPropTrainer attempts="10" attemptEpochs="500"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>

  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following straightforward configuration of the StateMachine exhibits 100% accuracy, slightly better than the best algorithm
    called BOSS, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=BirdChicken.
    MPEG-7 CE Shape-1 Part B is a database of binary images developed for testing MPEG-7 shape descriptors, and is available free online. 
    It is used for testing contour/image and skeleton-based descriptors. Classes of images vary broadly, and include classes that are
    similar in shape to one another. There are 20 instances of each class, and 60 classes in total.
    We have extracted the outlines of these images and mapped them into 1-D series of distances to the centre. 
    Bird/Chicken is the problem of distinguishing between an outline of a bird and a chicken.
    Demo note: The first 20 instances in BirdChicken.csv are for network learning and the last 20 instances for verification.
  -->
  <case name="Classification task BirdChicken: Simple pure ESN reservoir generating FiringFadingSum predictors, one Identity neuron as a classifier (Ridge regression trainer)">
    <samples fileName="BirdChicken.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="20">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="false"/>
          <external>
            <field name="DistanceFromCenter">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="6" dimY="6" dimZ="5">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.2" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="DistanceFromCenter" poolName="PureESN" density="1">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <readoutUnit name="Chicken1Bird0">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <ridgeRegrTrainer attemptEpochs="1">
              <lambda min="0.1" max="0.1" steps="2"/>
            </ridgeRegrTrainer>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>


  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following straightforward configuration of the StateMachine exhibits similar accuracy as the best algorithm
    called BOSS, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=BeetleFly.
    MPEG-7 CE Shape-1 Part B is a database of binary images developed for testing MPEG-7 shape descriptors, and is available free online. 
    It is used for testing contour/image and skeleton-based descriptors. Classes of images vary broadly, and include classes that are
    similar in shape to one another. There are 20 instances of each class, and 60 classes in total.
    We have extracted the outlines of these images and mapped them into 1-D series of distances to the centre. 
    Beetle/Fly is the problem of distinguishing between an outline of a beetle and a fly.
    Demo note: The first 20 instances in BeetleFly.csv are for network learning and the last 20 instances for verification.
  -->
  <case name="Classification task BeetleFly: Simple pure ESN reservoir generating FiringFadingSum predictors, Parallel Perceptron (one gate) as a classifier">
    <samples fileName="BeetleFly.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="20">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="false"/>
          <external>
            <field name="DistanceFromCenter">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="6" dimY="6" dimZ="5">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.0015"/>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.0015"/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.2" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="DistanceFromCenter" poolName="PureESN" density="1">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <readoutUnit name="Beetle1Fly0">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <ridgeRegrTrainer attemptEpochs="1">
              <lambda min="0.1" max="0.1" steps="2"/>
            </ridgeRegrTrainer>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>




  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following straightforward configuration of the StateMachine exhibits similar accuracy as the best algorithm
    called BOSS, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=Worms.
    Caenorhabditis elegans is a roundworm commonly used as a model organism in the study of genetics.
    The movement of these worms is known to be a useful indicator for understanding behavioural genetics.
    Brown et al. - "A dictionary of behavioral motifs reveals clusters of genes affecting Caenorhabditis elegans locomotion"
    describe a system for recording the motion of worms on an agar plate and measuring a range of human-defined features.
    It has been shown that the space of shapes Caenorhabditis elegans adopts on an agar plate can be represented by combinations of four
    base shapes, or eigenworms. Once the worm outline is extracted, each frame of worm motion can be captured by four scalars
    representing the amplitudes along each dimension when the shape is projected onto the four eigenworms. The data relates to 258 traces
    of worms converted into four "eigenworm" series. The eigenworm data are lengths from 17984 to 100674
    (sampled at 30 Hz, so from 10 minutes to 1 hour) and in four dimensions (eigwnworm 1 to 4).
    There are five classes: N2,goa-1,unc-1,unc-38 and unc-63. N2 is wildtype (i.e. normal) the other 4 are mutant strains.
    These datasets are the first dimension only (first eigenworm) The problems are series of first eigenworm1 averaged down
    so that all series are lengths 900 (the single hour long series is discarded). This smoothing is likely to discard discriminatory
    information. The Yemini features obtains nearly 100% accuracy, although we have not independently verified this.
    We address the problem of classifying individual worms as wild-type or mutant based on the time series of the first eigenworm,
    down-sampled to second-long intervals. We have 257 cases, which we split 70%/30% into a train and test set.
    Each series has 900 observations, and each worm is classified as either wild-type (the N2 reference strain - 109 cases) or one of
    four mutant types: goa-1 (44 cases); unc-1 (35 cases); unc-38 (45 cases) and unc-63 (25 cases). The data were extracted from the 
    C. elegans behavioural database {wormWeb}. The formatted classification problems are available from the website associated with this
    paper {tscWeb}.
    Demo note: The first 181 instances in Worms.csv are for network learning and the last 77 instances for verification.
  -->
  <case name="Classification task Worms: Simple pure ESN reservoir generating FiringFadingSum predictors, one Identity neuron as a classifier (FF-Resilient trainer)">
    <samples fileName="Worms.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="77">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="false"/>
          <external>
            <field name="Eigenworm1">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="7" dimY="7" dimZ="7">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                    <retainment density="1">
                      <strength min="0" max="0.5"/>
                    </retainment>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                    <retainment density="1">
                      <strength min="0" max="0.5"/>
                    </retainment>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="Eigenworm1" poolName="PureESN" density="1">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <readoutUnit name="Wild-N2">
          <classification oneWinnerGroupName="WormDNA">
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <resPropTrainer attempts="10" attemptEpochs="1500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Mutant-goa1">
          <classification oneWinnerGroupName="WormDNA">
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <resPropTrainer attempts="10" attemptEpochs="1500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Mutant-unc1">
          <classification oneWinnerGroupName="WormDNA">
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <resPropTrainer attempts="10" attemptEpochs="1500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Mutant-unc38">
          <classification oneWinnerGroupName="WormDNA">
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <resPropTrainer attempts="10" attemptEpochs="1500"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Mutant-unc63">
          <classification oneWinnerGroupName="WormDNA">
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <resPropTrainer attempts="10" attemptEpochs="1500"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>


  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    The dataset is from https://archive.ics.uci.edu/ml/datasets/Libras+Movement and contains 15 classes of 24 instances each, where
    each class references to a hand movement type in LIBRAS. The hand movement is represented as a bidimensional curve performed
    by the hand in a period of time. The curves were obtained from videos of hand movements, with the Libras performance from 4 
    different people, during 2 sessions. Each video corresponds to only one hand movement and has about 7 seconds.    
    Each video corresponds to a function F in a functions space which is the continual version of the input dataset.
    In the video pre-processing, a time normalization is carried out selecting 45 frames from each video, in according 
    to an uniform distribution. In each frame, the centroid pixels of the segmented objects (the hand) are found, which 
    compose the discrete version of the curve F with 45 points. All curves are normalized in the unitary space.
    Each curve F is mapped in a representation with 90 features, with representing the coordinates of movement.
    Each instance represents 45 points on a bi-dimensional space, which can be plotted in an ordered way (from 1 through
    45 as the X co-ordinate) in order to draw the path of the movement.
    For this demo purposes was selected 4x15 instances as the verification set.
    Demo note: The first 300 instances in LibrasMovement.csv are for network learning and the last 60 instances for verification.
  -->
  <case name="Classification task Libras Movement: Simple pure ESN reservoir generating FiringCount predictors, one TanH neuron as a classifier (FF-Resilient trainer)">
    <samples fileName="LibrasMovement.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="60">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="true"/>
          <external>
            <field name="coord_abcissa">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
            <field name="coord_ordinate">
              <realFeature standardize="true" keepReserve="true"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="5" dimY="5" dimZ="4">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.2" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="coord_abcissa" poolName="PureESN" density="0.25">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="coord_ordinate" poolName="PureESN" density="0.25">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="true"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.0825" folds="Auto">
        <readoutUnit name="curved swing">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal swing">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical swing">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="anti-clockwise arc">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="clockwise arc">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="circle">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal straight-line">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical straight-line">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal zigzag">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical zigzag">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal wavy">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical wavy">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-up curve">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-down curve">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="tremble">
          <classification oneWinnerGroupName="Hand movement type">
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>

  <!--
    This demo case demonstrates the simple form of classical ESN reservoir setup to predict next Low, High and Close share prices.
    Elastic net regression is used as forecasting readout.
    Time series contains real share prices of TTOO title from https://finance.yahoo.com/quote/TTOO/history?p=TTOO.
    The last recorded prices are from 2018/03/02 so StateMachine is predicting next High, Low and Close prices for the following
    business day 2018/03/05 (where real prices were High=6.58$, Low=5.99$ and Close=6.15$).
  -->
  <case name="Forecast task High and Low share prices of TTOO (T2 Biosystems, Inc.): Small analog reservoir (ESN), Elastic regression readout">
    <samples fileName="TTOO.csv"/>
    <stateMachineCfg randomizerSeek="0">
      <neuralPreprocessor>
        <input>
          <feedingContinuous bootCycles="Auto" routeToReadout="true"/>
          <external>
            <field name="High" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="Low" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="Adj Close" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="Logistic pool" dimX="6" dimY="6" dimZ="6">
                <neuronGroups>
                  <analogGroup name="Exc-Logistic" role="Excitatory" relShare="1" signalingRestriction="NoRestriction" readoutDensity="1">
                    <activationTanH/>
                    <retainment density="1">
                      <strength min="0" max="0.75" />
                    </retainment>
                  </analogGroup>
                  <analogGroup name="Inh-Logistic" role="Inhibitory" relShare="1" signalingRestriction="NoRestriction" readoutDensity="1">
                    <activationTanH/>
                    <retainment density="1">
                      <strength min="0" max="0.75"/>
                    </retainment>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="High" poolName="Logistic pool" density="1">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="0.1" />
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="Low" poolName="Logistic pool" density="1">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="0.1" />
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="Adj Close" poolName="Logistic pool" density="1">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="0.1" />
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="true"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <readoutUnit name="High">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <elasticRegrTrainer attemptEpochs="400" lambda="1e-6" alpha="0.5"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Low">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <elasticRegrTrainer attemptEpochs="400" lambda="1e-6" alpha="0.5"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Adj Close">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <elasticRegrTrainer attemptEpochs="400" lambda="1e-6" alpha="0.5"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>

  <!--
    This demo case demonstrates classical setup of LSM reservoir consisting of the neurons having spiking activation function.
    The dataset is from https://archive.ics.uci.edu/ml/datasets/Libras+Movement and contains 15 classes of 24 instances each, where
    each class references to a hand movement type in LIBRAS. The hand movement is represented as a bidimensional curve performed
    by the hand in a period of time. The curves were obtained from videos of hand movements, with the Libras performance from 4 
    different people, during 2 sessions. Each video corresponds to only one hand movement and has about 7 seconds.    
    Each video corresponds to a function F in a functions space which is the continual version of the input dataset.
    In the video pre-processing, a time normalization is carried out selecting 45 frames from each video, in according 
    to an uniform distribution. In each frame, the centroid pixels of the segmented objects (the hand) are found, which 
    compose the discrete version of the curve F with 45 points. All curves are normalized in the unitary space.
    Each curve F is mapped in a representation with 90 features, with representing the coordinates of movement.
    Each instance represents 45 points on a bi-dimensional space, which can be plotted in an ordered way (from 1 through
    45 as the X co-ordinate) in order to draw the path of the movement.
  -->
  <case name="Classification task Libras Movement: Classical LSM reservoir generating FiringFadingSum predictors, One TanH neuron as a classifier (FF-Resilient trainer)">
    <samples fileName="LibrasMovement.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="60">
      <neuralPreprocessor>
        <input>
          <feedingPatterned/>
          <external>
            <field name="coord_abcissa">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="coord_ordinate">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureLSM" dimX="6" dimY="5" dimZ="5">
                <neuronGroups>
                  <spikingGroup name="Exc-grp" role="Excitatory" relShare="4" readoutDensity="1">
                    <activationAutoIzhikevichIF role="Excitatory"/>
                  </spikingGroup>
                  <spikingGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1">
                    <activationAutoIzhikevichIF role="Inhibitory"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.3" relShareEI="0.2" relShareIE="0.4" relShareII="0.1" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="NA"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="coord_abcissa" poolName="PureLSM" density="1">
                <synapse>
                  <spikingTarget scope="Excitatory"/>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="coord_ordinate" poolName="PureLSM" density="1">
                <synapse>
                  <spikingTarget scope="Excitatory"/>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.0825" folds="Auto">
        <readoutUnit name="curved swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="anti-clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="circle">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-up curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-down curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="tremble">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>


  <!--
    This demo case demonstrates classical setup of LSM reservoir consisting of the neurons having spiking activation function.
    The dataset is from https://archive.ics.uci.edu/ml/datasets/Libras+Movement and contains 15 classes of 24 instances each, where
    each class references to a hand movement type in LIBRAS. The hand movement is represented as a bidimensional curve performed
    by the hand in a period of time. The curves were obtained from videos of hand movements, with the Libras performance from 4 
    different people, during 2 sessions. Each video corresponds to only one hand movement and has about 7 seconds.    
    Each video corresponds to a function F in a functions space which is the continual version of the input dataset.
    In the video pre-processing, a time normalization is carried out selecting 45 frames from each video, in according 
    to an uniform distribution. In each frame, the centroid pixels of the segmented objects (the hand) are found, which 
    compose the discrete version of the curve F with 45 points. All curves are normalized in the unitary space.
    Each curve F is mapped in a representation with 90 features, with representing the coordinates of movement.
    Each instance represents 45 points on a bi-dimensional space, which can be plotted in an ordered way (from 1 through
    45 as the X co-ordinate) in order to draw the path of the movement.
  -->
  <case name="Classification task Libras Movement: Classical LSM reservoir, One neuron FF-Resilient classifier uses firingCount predictor">
    <samples fileName="LibrasMovement.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="60">
      <neuralPreprocessor>
        <input>
          <feedingPatterned/>
          <external>
            <field name="coord_abcissa">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="coord_ordinate">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureLSM" dimX="6" dimY="5" dimZ="5">
                <neuronGroups>
                  <spikingGroup name="Exc-grp" role="Excitatory" relShare="4" readoutDensity="1">
                    <activationAdExpIF/>
                  </spikingGroup>
                  <spikingGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1">
                    <activationAdExpIF/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.3" relShareEI="0.2" relShareIE="0.4" relShareII="0.1" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="NA"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="coord_abcissa" poolName="PureLSM" density="0.25">
                <synapse delayMethod="Random" maxDelay="0">
                  <spikingTarget scope="Excitatory"/>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="coord_ordinate" poolName="PureLSM" density="0.25">
                <synapse delayMethod="Random" maxDelay="0">
                  <spikingTarget scope="Excitatory"/>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="true"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.0825" folds="Auto">
        <readoutUnit name="curved swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="anti-clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="circle">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-up curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-down curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="tremble">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>



  <!--
    This demo case demonstrates successful use of the new ability of the pure analog ESN reservoir
    to generalize and separate inputs and to perform fast accurate classifications.
    The dataset is from https://archive.ics.uci.edu/ml/datasets/Libras+Movement and contains 15 classes of 24 instances each, where
    each class references to a hand movement type in LIBRAS. The hand movement is represented as a bidimensional curve performed
    by the hand in a period of time. The curves were obtained from videos of hand movements, with the Libras performance from 4 
    different people, during 2 sessions. Each video corresponds to only one hand movement and has about 7 seconds.    
    Each video corresponds to a function F in a functions space which is the continual version of the input dataset.
    In the video pre-processing, a time normalization is carried out selecting 45 frames from each video, in according 
    to an uniform distribution. In each frame, the centroid pixels of the segmented objects (the hand) are found, which 
    compose the discrete version of the curve F with 45 points. All curves are normalized in the unitary space.
    Each curve F is mapped in a representation with 90 features, with representing the coordinates of movement.
    Each instance represents 45 points on a bi-dimensional space, which can be plotted in an ordered way (from 1 through
    45 as the X co-ordinate) in order to draw the path of the movement.
  -->
  <case name="Classification task Libras Movement: Simple pure ESN reservoir, One neuron FF-Resilient classifier uses firingCount predictor">
    <samples fileName="LibrasMovement.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="60">
      <neuralPreprocessor>
        <input>
          <feedingPatterned/>
          <external>
            <field name="coord_abcissa">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="coord_ordinate">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="6" dimY="5" dimZ="5">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="coord_abcissa" poolName="PureESN" density="0.25">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="coord_ordinate" poolName="PureESN" density="0.25">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="true"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.0825" folds="Auto">
        <readoutUnit name="curved swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="anti-clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="circle">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-up curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-down curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="tremble">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>


  <!--
    This demo case demonstrates experimental setup of reservoir consisting of the neurons having spiking and analog activation functions.
    The dataset is from https://archive.ics.uci.edu/ml/datasets/Libras+Movement and contains 15 classes of 24 instances each, where
    each class references to a hand movement type in LIBRAS. The hand movement is represented as a bidimensional curve performed
    by the hand in a period of time. The curves were obtained from videos of hand movements, with the Libras performance from 4 
    different people, during 2 sessions. Each video corresponds to only one hand movement and has about 7 seconds.    
    Each video corresponds to a function F in a functions space which is the continual version of the input dataset.
    In the video pre-processing, a time normalization is carried out selecting 45 frames from each video, in according 
    to an uniform distribution. In each frame, the centroid pixels of the segmented objects (the hand) are found, which 
    compose the discrete version of the curve F with 45 points. All curves are normalized in the unitary space.
    Each curve F is mapped in a representation with 90 features, with representing the coordinates of movement.
    Each instance represents 45 points on a bi-dimensional space, which can be plotted in an ordered way (from 1 through
    45 as the X co-ordinate) in order to draw the path of the movement.
  -->
  <case name="Classification task Libras Movement: Experimental mixed reservoir, One neuron FF-Resilient classifier uses firingCount predictor">
    <samples fileName="LibrasMovement.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="60">
      <neuralPreprocessor>
        <input>
          <feedingPatterned/>
          <external>
            <field name="coord_abcissa">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="coord_ordinate">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="SpikingPool" dimX="5" dimY="5" dimZ="3">
                <neuronGroups>
                  <spikingGroup name="Exc-grp-spiking" role="Excitatory" relShare="4" readoutDensity="1">
                    <activationAdExpIF/>
                    <bias min="0" max="0" randomSign="false" />
                  </spikingGroup>
                  <spikingGroup name="Inh-grp-spiking" role="Inhibitory" relShare="1" readoutDensity="1">
                    <activationAdExpIF/>
                    <bias min="0" max="0" randomSign="false" />
                  </spikingGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.3" relShareEI="0.2" relShareIE="0.4" relShareII="0.1" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
              <pool name="AnalogPool" dimX="5" dimY="5" dimZ="3">
                <neuronGroups>
                  <analogGroup name="Exc-grp-analog" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                  </analogGroup>
                  <analogGroup name="Inh-grp-analog" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <firingThreshold value="0.00125"/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <pool2PoolConns>
              <pool2PoolConn srcPool="AnalogPool" srcConnDensity="0.5" targetPool="SpikingPool" targetConnDensity="0.1" relShareEE="0.3" relShareEI="0.2" relShareIE="0.4" relShareII="0.1" constantNumOfConnections="false">
                <synapse/>
              </pool2PoolConn>
            </pool2PoolConns>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="coord_abcissa" poolName="SpikingPool" density="0.25">
                <synapse delayMethod="Random" maxDelay="0"/>
              </inputConnection>
              <inputConnection fieldName="coord_ordinate" poolName="SpikingPool" density="0.25">
                <synapse delayMethod="Random" maxDelay="0"/>
              </inputConnection>
              <inputConnection fieldName="coord_abcissa" poolName="AnalogPool" density="0.25">
                <synapse delayMethod="Random" maxDelay="0"/>
              </inputConnection>
              <inputConnection fieldName="coord_ordinate" poolName="AnalogPool" density="0.25">
                <synapse delayMethod="Random" maxDelay="0"/>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="true"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.0825" folds="Auto">
        <readoutUnit name="curved swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical swing">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="anti-clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="clockwise arc">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="circle">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical straight-line">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical zigzag">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="horizontal wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="vertical wavy">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-up curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="face-down curve">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="tremble">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationTanH/>
            <resPropTrainer attempts="5" attemptEpochs="400"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>





  <!--
    This demo case demonstrates how to instantiate two independent reservoirs. Configuration definies ESN reservoir
    structure having one pool of 512 TanH analog neurons and two instances of the reservoir (hence in total 2x512=1024 analog neurons).
    QRD regression is used as predicting readout.
    Dataset contains Mackey Glass chaotic time series (tau=17) and network forecasts the next value.
  -->
  <case name="Forecast task Mackey Glass chaotic time series: Two analog reservoirs (ESN), QRD regression output">
    <samples fileName="MackeyGlass.csv"/>
    <stateMachineCfg randomizerSeek="0">
      <neuralPreprocessor>
        <input>
          <feedingContinuous bootCycles="Auto" routeToReadout="false"/>
          <external>
            <field name="Value" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="ESNCfg">
            <pools>
              <pool name="Logistic pool" dimX="8" dimY="8" dimZ="8">
                <neuronGroups>
                  <analogGroup name="Exc-Logistic" role="Excitatory" relShare="1">
                    <activationTanH/>
                    <bias min="-0.75" max="0.75" randomSign="false" />
                    <retainment density="1">
                      <strength min="0.25" max="0.5" />
                    </retainment>
                  </analogGroup>
                  <analogGroup name="Inh-Logistic" role="Inhibitory" relShare="1">
                    <activationTanH/>
                    <bias min="-0.75" max="0.75" randomSign="false" />
                    <retainment density="1">
                      <strength min="0.25" max="0.5" />
                    </retainment>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.65"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="ESN reservoir #1" cfg="ESNCfg">
            <inputConnections>
              <inputConnection fieldName="Value" poolName="Logistic pool" density="0.5">
                <synapse/>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="true"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
          <reservoirInstance name="ESN reservoir #2" cfg="ESNCfg">
            <inputConnections>
              <inputConnection fieldName="Value" poolName="Logistic pool" density="0.5">
                <synapse/>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="true"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="1">
        <readoutUnit name="Value">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <qrdRegrTrainer attempts="1" attemptEpochs="1">
              <maxNoise min="0" max="0" steps="2"/>
            </qrdRegrTrainer>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>



  <!--
    This demo case demonstrates the simple form of classical ESN reservoir setup to predict next Low, High and Close share price.
    Reservoir consists of one pool of 6x6x6 TanH analog neurons.
    Elastic net regression is used as forecasting readout.
    Time series contains real share prices of TTOO title from https://finance.yahoo.com/quote/TTOO/history?p=TTOO.
    The last recorded prices are from 2018/03/02 so network is predicting next High, Low and Close prices for the following
    business day 2018/03/05 (where real prices were High=6.58$, Low=5.99$ and Close=6.15$).
  -->
  <case name="Forecast task High and Low share prices of TTOO (T2 Biosystems, Inc.): Small analog reservoir (ESN), Elastic regression readout">
    <samples fileName="TTOO.csv"/>
    <stateMachineCfg randomizerSeek="0">
      <neuralPreprocessor>
        <input>
          <feedingContinuous bootCycles="Auto" routeToReadout="true"/>
          <external>
            <field name="High" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="Low" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
            <field name="Adj Close" allowRoutingToReadout="true">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="Logistic pool" dimX="6" dimY="6" dimZ="6">
                <neuronGroups>
                  <analogGroup name="Exc-Logistic" role="Excitatory" relShare="1" signalingRestriction="AnalogOnly" readoutDensity="1">
                    <activationTanH/>
                    <retainment density="1">
                      <strength min="0" max="0.75" />
                    </retainment>
                  </analogGroup>
                  <analogGroup name="Inh-Logistic" role="Inhibitory" relShare="1" signalingRestriction="AnalogOnly" readoutDensity="1">
                    <activationTanH/>
                    <retainment density="1">
                      <strength min="0" max="0.75" />
                    </retainment>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.1" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="High" poolName="Logistic pool" density="1">
                <synapse>
                  <analogTarget>
                    <weight min="0" max="0.1" />
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="Low" poolName="Logistic pool" density="1">
                <synapse>
                  <analogTarget>
                    <weight min="0" max="0.1" />
                  </analogTarget>
                </synapse>
              </inputConnection>
              <inputConnection fieldName="Adj Close" poolName="Logistic pool" density="1">
                <synapse>
                  <analogTarget>
                    <weight min="0" max="0.1" />
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="true"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="false"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <readoutUnit name="High">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <elasticRegrTrainer attemptEpochs="300" lambda="1e-6" alpha="0.5"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Low">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <elasticRegrTrainer attemptEpochs="300" lambda="1e-6" alpha="0.5"/>
          </ff>
        </readoutUnit>
        <readoutUnit name="Adj Close">
          <forecast>
            <realFeature standardize="true" keepReserve="true"/>
          </forecast>
          <ff>
            <activationIdentity/>
            <elasticRegrTrainer attemptEpochs="300" lambda="1e-6" alpha="0.5"/>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>



  <!--
    Used dataset is a pre-processed and re-structured/reshaped version of a very commonly used dataset featuring epileptic seizure detection.
    The dataset was converted from https://archive.ics.uci.edu/ml/datasets/Epileptic+Seizure+Recognition and contains 11500 EEG recordings
    each for 1 second. After conversion there are only 2 classes, where each EEG pattern corresponds to an epileptic seizure or not.
    Relevant paper: http://users.fs.cvut.cz/ivo.bukovsky/PROJEKT/Data/Realna/BIO/EEG/reference/PRE61907.pdf
  -->
  <case name="Classification task Recognition of the Epileptic Seizure Brain Activity (EEG):  Pure ESN reservoir, one Identity neuron as a classifier (Ridge regression trainer)">
    <samples fileName="EpilepticSeizureActivity.csv"/>
    <stateMachineCfg randomizerSeek="0" verificationSamples="1000">
      <neuralPreprocessor>
        <input>
          <feedingPatterned bidir="true"/>
          <external>
            <field name="EEG">
              <realFeature standardize="true" keepReserve="false"/>
            </field>
          </external>
        </input>
        <reservoirCfgContainer>
          <reservoirCfg name="MainCfg">
            <pools>
              <pool name="PureESN" dimX="6" dimY="6" dimZ="5">
                <neuronGroups>
                  <analogGroup name="Exc-grp" role="Excitatory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                  <analogGroup name="Inh-grp" role="Inhibitory" relShare="1" readoutDensity="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection density="0.05" relShareEE="0.25" relShareEI="0.25" relShareIE="0.25" relShareII="0.25" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false">
                  <synapse/>
                </interconnection>
              </pool>
            </pools>
            <spectralRadius>
              <analogScope value="0.9999"/>
              <spikingScope value="NA"/>
            </spectralRadius>
          </reservoirCfg>
        </reservoirCfgContainer>
        <reservoirInstanceContainer>
          <reservoirInstance name="Main" cfg="MainCfg">
            <inputConnections>
              <inputConnection fieldName="EEG" poolName="PureESN" density="0.5">
                <synapse delayMethod="Random" maxDelay="0">
                  <analogTarget scope="All">
                    <weight min="0" max="1"/>
                  </analogTarget>
                </synapse>
              </inputConnection>
            </inputConnections>
            <predictors>
              <permission activation="false"
                          activationSquare="false"
                          activationFadingSum="false"
                          activationMWAvg="false"
                          firingFadingSum="true"
                          firingMWAvg="false"
                          firingCount="false"
                          firingBinPattern="false"/>
            </predictors>
          </reservoirInstance>
        </reservoirInstanceContainer>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <readoutUnit name="EpilepticSeizure">
          <classification>
            <binFeature/>
          </classification>
          <ff>
            <activationIdentity/>
            <ridgeRegrTrainer attemptEpochs="1">
              <lambda min="0.1" max="0.1" steps="2"/>
            </ridgeRegrTrainer>
          </ff>
        </readoutUnit>
      </readoutLayer>
    </stateMachineCfg>
  </case>



</demo>



<?xml version="1.0" encoding="UTF-8"?>
<demo dataFolder=".\\Data" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="SMDemoSettings.xsd">


  <!--
    Experimental.
    Time series contains real share prices of TTOO title from https://finance.yahoo.com/quote/TTOO/history?p=TTOO.
    The last recorded prices are from 2018/03/02 so StateMachine is predicting next High, Low and Close prices for the following
    business day 2018/03/05 (where real prices were High=6.58$, Low=5.99$ and Close=6.15$).
  -->
  <case name="Forecast task High and Low share prices of TTOO (T2 Biosystems, Inc.): Experimental reservoir (ESN), one Identity neuron as a forecaster (Resilient trainer)">
    <samples trainingData="TTOO_train.csv" verificationData="TTOO_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingContinuous bootCycles="Auto" routeToReadout="false"/>
          <fields>
            <externalFields>
              <field name="High" routeToReadout="true">
                <realFeature standardize="true" keepReserve="true"/>
              </field>
              <field name="Low" routeToReadout="true">
                <realFeature standardize="true" keepReserve="true"/>
              </field>
              <field name="Adj Close" routeToReadout="true">
                <realFeature standardize="true" keepReserve="true"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="Logistic pool">
                <proportions dimX="180" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="a-grp" relShare="1" firingThreshold="0.00125" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1"/>
                </interconnection>
                <predictors activation="true"
                            activationSquare="true"
                            activationFadingSum="false"
                            activationMWAvg="false"
                            firingFadingSum="false"
                            firingMWAvg="false"
                            firingCount="false"
                            firingBinPattern="false">
                </predictors>
              </pool>
              <pool name="Spiking pool">
                <proportions dimX="180" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <spikingGroup name="s-grp" relShare="1">
                    <activationLeakyIF refractoryPeriods="0"/>
                    <homogenousExcitability excitatoryStrength="0.8" inputRatio="0.5" inhibitoryRatio="0.1"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" allowSelfConnection="false"/>
                </interconnection>
                <predictors activation="false"
                            activationSquare="false"
                            activationFadingSum="false"
                            activationMWAvg="false"
                            firingFadingSum="false"
                            firingMWAvg="false"
                            firingCount="true"
                            firingBinPattern="false">
                  <params>
                    <firingCount window="100"/>
                  </params>
                </predictors>
              </pool>
            </pools>
            <interPoolConnections>
              <interPoolConnection targetPool="Spiking pool" targetConnDensity="1" sourcePool="Logistic pool" sourceConnDensity="0.1"/>
            </interPoolConnections>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="High" poolName="Logistic pool"/>
              <connection inputFieldName="High" poolName="Spiking pool" signalingRestriction="AnalogOnly"/>
              <connection inputFieldName="Low" poolName="Logistic pool"/>
              <connection inputFieldName="Low" poolName="Spiking pool" signalingRestriction="AnalogOnly"/>
              <connection inputFieldName="Adj Close" poolName="Logistic pool"/>
              <connection inputFieldName="Adj Close" poolName="Spiking pool" signalingRestriction="AnalogOnly"/>
            </inputConnections>
            <synapse>
              <spikingTarget>
                <input maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </input>
                <excitatory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </excitatory>
                <inhibitory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </inhibitory>
              </spikingTarget>
              <analogTarget spectralRadius="0.9999">
                <input maxDelay="0">
                  <analogSource>
                    <weight min="0" max="2"/>
                  </analogSource>
                </input>
              </analogTarget>
            </synapse>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <defaultNetworks>
          <forecast>
            <ff>
              <activationIdentity/>
              <resPropTrainer attempts="3" attemptEpochs="500"/>
            </ff>
          </forecast>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="High">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
            </forecast>
          </readoutUnit>
          <readoutUnit name="Low">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
            </forecast>
          </readoutUnit>
          <readoutUnit name="Adj Close">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
            </forecast>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>




  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following configuration of the StateMachine leads to 87.8% accuracy, slightly worse than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: Simple pure LSM reservoir generating FiringFadingSum predictors, one TanH neuron as a classifier (Resilient trainer)">
    <samples trainingData="ProximalPhalanxOutlineAgeGroup_train.csv" verificationData="ProximalPhalanxOutlineAgeGroup_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="true">
            <unification unifyAmplitude="false" detrend="false">
              <resampling/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Outline">
                <realFeature/>
                <spikeCode componentHalfCodeLength="15" lowestThreshold="1e-2" signalComponent="true" deltaComponent="false"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="Pool1">
                <proportions dimX="120" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <spikingGroup name="Spiking-grp" relShare="1">
                    <activationAdExpIF/>
                    <homogenousExcitability excitatoryStrength="0.75" inputRatio="0.67" inhibitoryRatio="0.25"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" allowSelfConnection="false"/>
                </interconnection>
              </pool>
              <pool name="Pool2">
                <proportions dimX="120" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="Analog-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" allowSelfConnection="true"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Outline" poolName="Pool1" spikingTargetDensity="1"/>
              <connection inputFieldName="Outline" poolName="Pool2" analogTargetDensity="0.2"/>
            </inputConnections>
            <synapse>
              <spikingTarget>
                <input maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </input>
                <excitatory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </excitatory>
                <inhibitory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </inhibitory>
              </spikingTarget>
              <analogTarget>
                <input maxDelay="0">
                  <analogSource>
                    <weight min="0" max="1"/>
                  </analogSource>
                </input>
                <indifferent maxDelay="0"/>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.25" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="3" attemptEpochs="1000"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="0-6 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="7-12 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="13-19 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>


  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following configuration of the StateMachine leads to 87.8% accuracy, slightly worse than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: Simple pure ESN reservoir generating FiringFadingSum and FiringCount predictors, one Elliot neuron as a classifier (Resilient trainer)">
    <samples trainingData="ProximalPhalanxOutlineAgeGroup_train.csv" verificationData="ProximalPhalanxOutlineAgeGroup_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="true" routeToReadout="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Outline">
                <realFeature/>
              </field>
            </externalFields>
            <transformedFields>
              <field name="diffOutline1">
                <diff fieldName="Outline" interval="1"/>
                <realFeature/>
                <spikeCode componentHalfCodeLength="8" signalComponent="true" deltaComponent="false"/>
              </field>
            </transformedFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureESN-A">
                <proportions dimX="150" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" allowSelfConnection="false"/>
                </interconnection>
              </pool>
              <pool name="PureESN-B">
                <proportions dimX="150" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" allowSelfConnection="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Outline" analogTargetDensity="0.2" poolName="PureESN-A" signalingRestriction="AnalogOnly"/>
              <connection inputFieldName="diffOutline1" analogTargetDensity="0.2" poolName="PureESN-B" signalingRestriction="AnalogOnly"/>
            </inputConnections>
            <synapse>
              <analogTarget>
                <input maxDelay="0">
                  <analogSource>
                    <weight min="0" max="1"/>
                  </analogSource>
                </input>
                <indifferent maxDelay="0"/>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="true"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.25" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="3" attemptEpochs="1000"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="0-6 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="7-12 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="13-19 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>


  
  
  <!--
    The best algorithm called COTE, referenced at the dataset's home site, exhibits accuracy 81.4%.
    It is much better than the results of StateMachine (69%). This is a good case for finding other ways to improve StateMachine :-)
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=CricketX.
    The series Cricket X, Y and Z are accelerometer data (in three dimensions) taken from actors performing cricket gestures.
    The twelve classes are different umpire signals: Cancel Call, Dead Ball, Four, Last Hour Leg Bye, No Ball, One Short, Out,
    Penalty Runs, Six, TV Replay, and Wide. They mounted two accelerometers orthogonal to each other, thus acceleration is measured
    in 3D space. The accelerometers are housed in a small wrist watch sized enclosure worn in the form of a wrist band.
    Taken together the data is a multivariate time series classificatin problem, but the serise are not alligned so in its current
    format cannot be used s such Segmentation of intentional gestures for sports video annotation, Online Context Recognition in Multisensor Systems using Dynamic Time Warping.
    The data are multi-dimensional, but they are not aligned, so it is not possible.
  -->
  <case name="Classification task CricketX: pure ESN reservoir generating FiringFadingSum predictors, one Identity neuron as a classifier (Resilient trainer)">
    <samples trainingData="CricketX_train.csv" verificationData="CricketX_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor predictorsReductionRatio="0">
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="false" variablesSchema="Sequential">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Accel" routeToReadout="true">
                <realFeature />
                <spikeCode componentHalfCodeLength="16" lowestThreshold="1e-6" signalComponent="true" deltaComponent="true"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PoolMain">
                <proportions dimX="200" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <spikingGroup name="grp1" relShare="1">
                    <activationAdExpIF solverCompSteps="2" solverMethod="Euler" stimuliDuration="1"/>
                    <homogenousExcitability excitatoryStrength="0.75" inputRatio="0.67" inhibitoryRatio="0.25"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" avgDistance="NA" allowSelfConnection="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Accel" poolName="PoolMain" spikingTargetDensity="1" signalingRestriction="NoRestriction"/>
            </inputConnections>
            <synapse>
              <spikingTarget>
                <input maxDelay="0">
                  <spikingSource>
                    <weight min="0" max="1"/>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </input>
                <excitatory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </excitatory>
                <inhibitory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </inhibitory>
              </spikingTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
              <params>
                <activationMWAvg window="300" weights="Constant"/>
                <firingFadingSum strength="0.005"/>
                <firingCount window="300"/>
                <firingBinPattern window="1"/>
              </params>
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="5" attemptEpochs="1000"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="Cancel Call">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Dead Ball">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Four">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Last Hour">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Leg Bye">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="No Ball">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="One Short">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Out">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Penalty Runs">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Six">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="TV Replay">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Wide">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>


  <!--
    This demo case demonstrates successful use of a simple LSM reservoir consisting of LeakyIF neurons for the accurate classifications.
    Following straightforward configuration of the StateMachine exhibits 90.00% accuracy, slightly worse than the best algorithm
    called BOSS, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=BeetleFly.
    MPEG-7 CE Shape-1 Part B is a database of binary images developed for testing MPEG-7 shape descriptors, and is available free online. 
    It is used for testing contour/image and skeleton-based descriptors. Classes of images vary broadly, and include classes that are
    similar in shape to one another. There are 20 instances of each class, and 60 classes in total.
    We have extracted the outlines of these images and mapped them into 1-D series of distances to the centre. 
    Beetle/Fly is the problem of distinguishing between an outline of a beetle and a fly.
  -->
  <case name="Classification task BeetleFly: Simple pure LSM reservoir generating FiringFadingSum predictors, one TanH neuron as a classifier (Resilient trainer)">
    <samples trainingData="BeetleFly_train.csv" verificationData="BeetleFly_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor predictorsReductionRatio="0">
        <inputEncoder>
          <feedingPatterned bidir="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="DistanceFromCenter">
                <realFeature standardize="true" keepReserve="true"/>
                <spikeCode componentHalfCodeLength="15" lowestThreshold="1e-2" signalComponent="true" deltaComponent="false"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureLSM">
                <proportions dimX="6" dimY="6" dimZ="5"/>
                <neuronGroups>
                  <spikingGroup name="Spiking-grp" relShare="1">
                    <activationLeakyIF refractoryPeriods="0"/>
                    <homogenousExcitability excitatoryStrength="0.7" inputRatio="0.8" inhibitoryRatio="0.1"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="DistanceFromCenter" poolName="PureLSM" spikingTargetDensity="1"/>
            </inputConnections>
            <synapse>
              <spikingTarget>
                <input maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </input>
                <excitatory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </excitatory>
                <inhibitory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <linearDynamics/>
                    </plasticity>
                  </spikingSource>
                </inhibitory>
              </spikingTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <defaultNetworks/>
        <readoutUnits>
          <readoutUnit name="Beetle1Fly0">
            <classification>
              <networks>
                <ff>
                  <activationTanH/>
                  <resPropTrainer attempts="5" attemptEpochs="200"/>
                </ff>
              </networks>
            </classification>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following straightforward configuration of the StateMachine exhibits 100% accuracy, slightly better than the best algorithm
    called BOSS, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=BirdChicken.
    MPEG-7 CE Shape-1 Part B is a database of binary images developed for testing MPEG-7 shape descriptors, and is available free online. 
    It is used for testing contour/image and skeleton-based descriptors. Classes of images vary broadly, and include classes that are
    similar in shape to one another. There are 20 instances of each class, and 60 classes in total.
    We have extracted the outlines of these images and mapped them into 1-D series of distances to the centre. 
    Bird/Chicken is the problem of distinguishing between an outline of a bird and a chicken.
  -->
  <case name="Classification task BirdChicken: Simple pure ESN reservoir generating FiringFadingSum predictors, one TanH neuron as a classifier (Resilient trainer)">
    <samples trainingData="BirdChicken_train.csv" verificationData="BirdChicken_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="DistanceFromCenter">
                <realFeature standardize="true" keepReserve="true"/>
                <spikeCode componentHalfCodeLength="16" lowestThreshold="1e-3" signalComponent="true" deltaComponent="false"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureESN">
                <proportions dimX="6" dimY="6" dimZ="5"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" firingThreshold="0.00125" relShare="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="DistanceFromCenter" poolName="PureESN"/>
            </inputConnections>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto" repetitions="1">
        <defaultNetworks/>
        <readoutUnits>
          <readoutUnit name="Chicken1Bird0">
            <classification>
              <networks>
                <ff>
                  <activationTanH/>
                  <resPropTrainer attempts="5" attemptEpochs="200"/>
                </ff>
              </networks>
            </classification>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
      <mapper>
        <map readoutUnitName="Chicken1Bird0">
          <allowedPredictors>
            <predictor name="FiringFadingSum"/>
          </allowedPredictors>
        </map>
      </mapper>
    </stateMachine>
  </case>




  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    Following configuration of the StateMachine leads to 87.8% accuracy, slightly worse than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: Simple pure ESN reservoir generating FiringFadingSum and FiringCount predictors, one Elliot neuron as a classifier (Resilient trainer)">
    <samples trainingData="ProximalPhalanxOutlineAgeGroup_train.csv" verificationData="ProximalPhalanxOutlineAgeGroup_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Outline">
                <realFeature/>
              </field>
            </externalFields>
            <transformedFields>
              <field name="diffOutline1">
                <diff fieldName="Outline" interval="1"/>
                <realFeature/>
                <spikeCode componentHalfCodeLength="8" signalComponent="true" deltaComponent="false"/>
              </field>
            </transformedFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureESN-A">
                <proportions dimX="150" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" allowSelfConnection="false"/>
                </interconnection>
              </pool>
              <pool name="PureESN-B">
                <proportions dimX="150" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.2" allowSelfConnection="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Outline" analogTargetDensity="0.2" poolName="PureESN-A" signalingRestriction="AnalogOnly"/>
              <connection inputFieldName="diffOutline1" analogTargetDensity="0.2" poolName="PureESN-B" signalingRestriction="AnalogOnly"/>
            </inputConnections>
            <synapse>
              <analogTarget>
                <input maxDelay="0">
                  <analogSource>
                    <weight min="0.25" max="1.75"/>
                  </analogSource>
                </input>
                <indifferent maxDelay="0"/>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="true"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.25" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="3" attemptEpochs="1000"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="0-6 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="7-12 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="13-19 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    This demo case demonstrates bypassing of neural preprocessor.
    Following simple configuration of the StateMachine's alone readout layer exhibits 85.85% accuracy, it is slightly worse than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: No preprocesing, Multilayer Feed forward network as a classifier (Resilient trainer)">
    <samples trainingData="ProximalPhalanxOutlineAgeGroup_train.csv" verificationData="ProximalPhalanxOutlineAgeGroup_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <readoutLayer testDataRatio="0.25" folds="Auto">
        <defaultNetworks>
          <classification>
            <ff>
              <activationIdentity/>
              <hiddenLayers>
                <layer neurons="50">
                  <activationTanH/>
                </layer>
              </hiddenLayers>
              <resPropTrainer attempts="10" attemptEpochs="500"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="0-6 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="7-12 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="13-19 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    This demo case demonstrates successful use of mixed analog and spiking neurons.
    Following configuration of the StateMachine exhibits 88.29% accuracy, slightly better than the best algorithm
    called ST, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=ProximalPhalanxOutlineAgeGroup.
    This series of 11 classification problems were created as part of Luke Davis's PhD titled "Predictive Modelling of Bone Ageing".
    They are all derived from the same images, extracted from Cao et al. "Digital hand atlas and web-based bone age assessment: system design and implementation".
    They are designed to test the efficacy of hand and bone outline detection and whether these outlines could be helpful in bone
    age prediction. Algorithms to automatically extract the hand outlines and then the outlines of three bones of the middle finger
    (proximal, middle and distal phalanges) were applied to over 1300 images, and three human evaluators labelled the output
    of the image outlining as correct or incorrect. This generated three classification problems: DistalPhalanxOutlineCorrect; MiddlePhalanxOutlineCorrect; and ProximalPhalanxOutlineCorrect.
    The next stage of the project was to use the outlines to predict information about the subjects age.
    The three problems {DistalPhalanxOutlineAgeGroup, MiddlePhalanxOutlineAgeGroup and ProximalPhalanxOutlineAgeGroup} involve using
    the outline of one of the phalanges to predict whether the subject is one of three age groups: 0-6 years old, 7-12 years old
    and 13-19 years old. Note that these problems are aligned by subject, and hence can be treated as a multi dimensional
    TSC problem. Problem Phalanges contains the concatenation of all three problems. Bone age estimation is usually performed by
    an expert with an algorithm called Tanner-Whitehouse. This involves scoring each bone into one of seven categories based on
    the stage of development. The final three bone image classification problems, DistalPhalanxTW, MiddlePhalanxTW and ProximalPhalanxTW},
    involve predicting the Tanner-Whitehouse score (as labelled by a human expert) from the outline.
  -->
  <case name="Classification task ProximalPhalanxOutlineAgeGroup: Mixed reservoir generating FiringFadingSum and Activation predictors, MLP as a classifier (Resilient trainer)">
    <samples trainingData="ProximalPhalanxOutlineAgeGroup_train.csv" verificationData="ProximalPhalanxOutlineAgeGroup_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Outline">
                <realFeature/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="ESN">
                <proportions dimX="5" dimY="5" dimZ="5"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1"/>
                </interconnection>
              </pool>
              <pool name="LSM">
                <proportions dimX="5" dimY="5" dimZ="2"/>
                <neuronGroups>
                  <spikingGroup name="AdExpIF-grp" relShare="1">
                    <activationAdExpIF/>
                    <homogenousExcitability excitatoryStrength="0.75" inputRatio="0.67" inhibitoryRatio="0.25"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" allowSelfConnection="false"/>
                </interconnection>
                <predictors activation="false"
                            activationSquare="false"
                            activationFadingSum="false"
                            activationMWAvg="false"
                            firingFadingSum="true"
                            firingMWAvg="true"
                            firingCount="true"
                            firingBinPattern="true">
                </predictors>
              </pool>
            </pools>
            <interPoolConnections>
              <interPoolConnection targetPool="LSM" targetConnDensity="1" sourcePool="ESN" sourceConnDensity="0.1"/>
            </interPoolConnections>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Outline" analogTargetDensity="0.25" poolName="ESN" signalingRestriction="AnalogOnly"/>
            </inputConnections>
            <synapse>
              <spikingTarget>
                <excitatory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </excitatory>
                <inhibitory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </inhibitory>
              </spikingTarget>
              <analogTarget>
                <input maxDelay="0">
                  <analogSource>
                    <weight min="0" max="1"/>
                  </analogSource>
                </input>
                <indifferent maxDelay="0"/>
              </analogTarget>
            </synapse>
            <predictors activation="true"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.25" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="3" attemptEpochs="500"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="0-6 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="7-12 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
          <readoutUnit name="13-19 years">
            <classification oneWinnerGroupName="AgeGroup"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike, input resampling and transformation. 
    Following straightforward configuration of the StateMachine exhibits 80.52% accuracy, clearly better than the best algorithm
    called BOSS, referenced at the dataset's home site:
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=Worms.
    Caenorhabditis elegans is a roundworm commonly used as a model organism in the study of genetics.
    The movement of these worms is known to be a useful indicator for understanding behavioural genetics.
    Brown et al. - "A dictionary of behavioral motifs reveals clusters of genes affecting Caenorhabditis elegans locomotion"
    describe a system for recording the motion of worms on an agar plate and measuring a range of human-defined features.
    It has been shown that the space of shapes Caenorhabditis elegans adopts on an agar plate can be represented by combinations of four
    base shapes, or eigenworms. Once the worm outline is extracted, each frame of worm motion can be captured by four scalars
    representing the amplitudes along each dimension when the shape is projected onto the four eigenworms. The data relates to 258 traces
    of worms converted into four "eigenworm" series. The eigenworm data are lengths from 17984 to 100674
    (sampled at 30 Hz, so from 10 minutes to 1 hour) and in four dimensions (eigwnworm 1 to 4).
    There are five classes: N2,goa-1,unc-1,unc-38 and unc-63. N2 is wildtype (i.e. normal) the other 4 are mutant strains.
    These datasets are the first dimension only (first eigenworm) The problems are series of first eigenworm1 averaged down
    so that all series are lengths 900 (the single hour long series is discarded). This smoothing is likely to discard discriminatory
    information. The Yemini features obtains nearly 100% accuracy, although we have not independently verified this.
    We address the problem of classifying individual worms as wild-type or mutant based on the time series of the first eigenworm,
    down-sampled to second-long intervals. We have 257 cases, which we split 70%/30% into a train and test set.
    Each series has 900 observations, and each worm is classified as either wild-type (the N2 reference strain - 109 cases) or one of
    four mutant types: goa-1 (44 cases); unc-1 (35 cases); unc-38 (45 cases) and unc-63 (25 cases). The data were extracted from the 
    C. elegans behavioural database {wormWeb}. The formatted classification problems are available from the website associated with this
    paper {tscWeb}.
  -->
  <case name="Classification task Worms: Simple pure ESN reservoir generating FiringFadingSum predictors, one Elliot neuron as a classifier (Resilient trainer)">
    <samples trainingData="Worms_train.csv" verificationData="Worms_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="180"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Eigenworm1">
                <realFeature/>
              </field>
            </externalFields>
            <transformedFields>
              <field name="TransEigenworm1">
                <yeoJohnson fieldName="Eigenworm1" lambda="0.5"/>
              </field>
            </transformedFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureESN">
                <proportions dimX="7" dimY="7" dimZ="7"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="TransEigenworm1" analogTargetDensity="0.3333" poolName="PureESN"/>
            </inputConnections>
            <synapse>
              <analogTarget>
                <input maxDelay="0">
                  <analogSource>
                    <weight min="0" max="2.5"/>
                  </analogSource>
                </input>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
              <params>
                <firingFadingSum strength="0.002"/>
              </params>
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="5" attemptEpochs="1500"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="Wild-N2">
            <classification oneWinnerGroupName="WormDNA"/>
          </readoutUnit>
          <readoutUnit name="Mutant-goa1">
            <classification oneWinnerGroupName="WormDNA"/>
          </readoutUnit>
          <readoutUnit name="Mutant-unc1">
            <classification oneWinnerGroupName="WormDNA"/>
          </readoutUnit>
          <readoutUnit name="Mutant-unc38">
            <classification oneWinnerGroupName="WormDNA"/>
          </readoutUnit>
          <readoutUnit name="Mutant-unc63">
            <classification oneWinnerGroupName="WormDNA"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    This demo case demonstrates successful use of the pure analog ESN reservoir for the fast and accurate classifications enabled by
    the new ability of the analog neurons to fire a spike.
    The dataset is from https://archive.ics.uci.edu/ml/datasets/Libras+Movement and contains 15 classes of 24 instances each, where
    each class references to a hand movement type in LIBRAS. The hand movement is represented as a bidimensional curve performed
    by the hand in a period of time. The curves were obtained from videos of hand movements, with the Libras performance from 4 
    different people, during 2 sessions. Each video corresponds to only one hand movement and has about 7 seconds.    
    Each video corresponds to a function F in a functions space which is the continual version of the input dataset.
    In the video pre-processing, a time normalization is carried out selecting 45 frames from each video, in according 
    to an uniform distribution. In each frame, the centroid pixels of the segmented objects (the hand) are found, which 
    compose the discrete version of the curve F with 45 points. All curves are normalized in the unitary space.
    Each curve F is mapped in a representation with 90 features, with representing the coordinates of movement.
    Each instance represents 45 points on a bi-dimensional space, which can be plotted in an ordered way (from 1 through
    45 as the X co-ordinate) in order to draw the path of the movement.
    For this demo purposes was selected 4x15 instances as the verification set.
  -->
  <case name="Classification task Libras Movement: Simple pure ESN reservoir generating FiringFadingSum predictors, one TanH neuron as a classifier (FF-Resilient trainer)">
    <samples trainingData="LibrasMovement_train.csv" verificationData="LibrasMovement_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="true" routeToReadout="false" variablesSchema="Groupped">
            <unification unifyAmplitude="false" detrend="false">
              <resampling uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="coord_abcissa">
                <realFeature/>
              </field>
              <field name="coord_ordinate">
                <realFeature/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureESN">
                <proportions dimX="6" dimY="5" dimZ="5"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="false" constantNumOfConnections="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="coord_abcissa" poolName="PureESN" analogTargetDensity="0.25" spikingTargetDensity="0"/>
              <connection inputFieldName="coord_ordinate" poolName="PureESN" analogTargetDensity="0.25" spikingTargetDensity="0"/>
            </inputConnections>
            <synapse>
              <analogTarget>
                <input maxDelay="5"/>
                <indifferent maxDelay="0"/>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
              <params>
                <firingFadingSum strength="0"/>
              </params>
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.0825" folds="Auto">
        <defaultNetworks>
          <classification>
            <ff>
              <activationIdentity/>
              <resPropTrainer attempts="5" attemptEpochs="400"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="curved swing">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="horizontal swing">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="vertical swing">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="anti-clockwise arc">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="clockwise arc">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="circle">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="horizontal straight-line">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="vertical straight-line">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="horizontal zigzag">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="vertical zigzag">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="horizontal wavy">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="vertical wavy">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="face-up curve">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="face-down curve">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
          <readoutUnit name="tremble">
            <classification oneWinnerGroupName="Hand movement type"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    This demo case demonstrates how to instantiate two independent reservoirs. Configuration definies two ESN reservoir
    structures each having two interconnected pools of 100 TanH analog neurons.
    Two corresponding reservoirs are then instantiated (hence in total 2x2x100=400 analog neurons).
    QRD regression is used as predicting readout.
    Dataset contains Mackey Glass chaotic time series (tau=17) and network very accurately forecasts the next value.
  -->
  <case name="Forecast task Mackey Glass chaotic time series: Two independent ESN reservoirs, one Identity neuron as a forecaster, QRD regression trainer">
    <samples trainingData="MackeyGlass_train.csv" verificationData="MackeyGlass_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor predictorsReductionRatio="0">
        <inputEncoder>
          <feedingContinuous bootCycles="Auto" routeToReadout="true"/>
          <fields>
            <externalFields>
              <field name="Value" routeToReadout="true">
                <realFeature standardize="true" keepReserve="false"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="ESNCfg #1">
            <pools>
              <pool name="Logistic chain pool">
                <proportions dimX="100" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="Tanh-grp" relShare="1">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <chainSchema ratio="1" circle="false" repetitions="1"/>
                </interconnection>
              </pool>
              <pool name="Logistic random pool">
                <proportions dimX="100" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="true"/>
                </interconnection>
              </pool>
            </pools>
            <interPoolConnections>
              <interPoolConnection targetPool="Logistic random pool" targetConnDensity="1" sourcePool="Logistic chain pool" sourceConnDensity="0.01"/>
            </interPoolConnections>
          </reservoirStructure>
          <reservoirStructure name="ESNCfg #2">
            <pools>
              <pool name="Logistic chain pool">
                <proportions dimX="100" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <chainSchema ratio="1" circle="false" repetitions="1"/>
                </interconnection>
              </pool>
              <pool name="Logistic random pool">
                <proportions dimX="100" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="true"/>
                </interconnection>
              </pool>
            </pools>
            <interPoolConnections>
              <interPoolConnection targetPool="Logistic chain pool" targetConnDensity="1" sourcePool="Logistic random pool" sourceConnDensity="0.05"/>
            </interPoolConnections>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="ESN reservoir #1" reservoirStructure="ESNCfg #1">
            <inputConnections>
              <connection inputFieldName="Value" poolName="Logistic chain pool"/>
            </inputConnections>
            <predictors activation="true"
                        activationSquare="true"
                        activationFadingSum="true"
                        activationMWAvg="false"
                        firingFadingSum="false"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
          <reservoirInstance name="ESN reservoir #2" reservoirStructure="ESNCfg #2">
            <inputConnections>
              <connection inputFieldName="Value" poolName="Logistic random pool"/>
            </inputConnections>
            <predictors activation="true"
                        activationSquare="true"
                        activationFadingSum="true"
                        activationMWAvg="false"
                        firingFadingSum="false"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="1">
        <defaultNetworks/>
        <readoutUnits>
          <readoutUnit name="Value">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
              <networks>
                <ff>
                  <activationIdentity/>
                  <qrdRegrTrainer attempts="1" attemptEpochs="1">
                    <noise min="0" max="0" subIntervals="1"/>
                  </qrdRegrTrainer>
                </ff>
              </networks>
            </forecast>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>

  <!--
    This demo case demonstrates the simple form of classical ESN reservoir setup to predict next Low, High and Close share prices.
    Elastic net regression is used as forecasting readout.
    Time series contains real share prices of TTOO title from https://finance.yahoo.com/quote/TTOO/history?p=TTOO.
    The last recorded prices are from 2018/03/02 so StateMachine is predicting next High, Low and Close prices for the following
    business day 2018/03/05 (where real prices were High=6.58$, Low=5.99$ and Close=6.15$).
  -->
  <case name="Forecast task High and Low share prices of TTOO (T2 Biosystems, Inc.): Small analog reservoir (ESN), one Identity neuron as a forecaster (Elastic trainer)">
    <samples trainingData="TTOO.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingContinuous bootCycles="Auto" routeToReadout="true"/>
          <fields>
            <externalFields>
              <field name="High" routeToReadout="true">
                <realFeature standardize="true" keepReserve="false"/>
              </field>
              <field name="Low" routeToReadout="true">
                <realFeature standardize="true" keepReserve="false"/>
              </field>
              <field name="Adj Close" routeToReadout="true">
                <realFeature standardize="true" keepReserve="false"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="Logistic pool">
                <proportions dimX="6" dimY="6" dimZ="6"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                    <retainment density="1">
                      <strength min="0" max="0.75" />
                    </retainment>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <chainSchema ratio="1" circle="true" replaceExistingConnections="true" repetitions="3"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="High" poolName="Logistic pool"/>
              <connection inputFieldName="Low" poolName="Logistic pool"/>
              <connection inputFieldName="Adj Close" poolName="Logistic pool"/>
            </inputConnections>
            <synapse>
              <analogTarget spectralRadius="0.9999">
                <input>
                  <analogSource>
                    <weight min="0" max="0.1"/>
                  </analogSource>
                </input>
              </analogTarget>
            </synapse>
            <predictors activation="true"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="false"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <defaultNetworks>
          <forecast>
            <ff>
              <activationIdentity/>
              <elasticRegrTrainer attemptEpochs="400" lambda="1e-6" alpha="0.5"/>
            </ff>
          </forecast>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="High">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
            </forecast>
          </readoutUnit>
          <readoutUnit name="Low">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
            </forecast>
          </readoutUnit>
          <readoutUnit name="Adj Close">
            <forecast>
              <realFeature standardize="true" keepReserve="true"/>
            </forecast>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>



  <!--
    Used dataset is a pre-processed and re-structured/reshaped version of a very commonly used dataset featuring epileptic seizure detection.
    The dataset was converted from https://archive.ics.uci.edu/ml/datasets/Epileptic+Seizure+Recognition and contains 11500 EEG recordings
    each for 1 second. After conversion each EEG pattern corresponds to an epileptic seizure or not.
    Achieved accuracy is 99.1%
    Relevant paper: http://users.fs.cvut.cz/ivo.bukovsky/PROJEKT/Data/Realna/BIO/EEG/reference/PRE61907.pdf
  -->
  <case name="Classification task Recognition of the Epileptic Seizure Brain Activity (EEG):  Pure ESN reservoir (FiringFadingSum predictors), Multilayer Feed forward network as a classifier (Resilient trainer)">
    <samples trainingData="EpilepticSeizureActivity_train.csv" verificationData="EpilepticSeizureActivity_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor>
        <inputEncoder>
          <feedingPatterned bidir="true" routeToReadout="false">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="EEG" routeToReadout="true">
                <realFeature standardize="true" keepReserve="false"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PureESN">
                <proportions dimX="178" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" signalingRestriction="NoRestriction">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="true" constantNumOfConnections="false"/>
                  <chainSchema ratio="1" circle="true" repetitions="1"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="EEG" poolName="PureESN"/>
            </inputConnections>
            <synapse>
              <analogTarget>
                <input delayMethod="Random" maxDelay="89"/>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
              <params>
                <activationFadingSum/>
                <activationMWAvg weights="Constant" window="178"/>
                <firingFadingSum strength="0.005"/>
                <firingMWAvg weights="Constant" window="178"/>
                <firingCount/>
                <firingBinPattern/>
              </params>
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto">
        <defaultNetworks/>
        <readoutUnits>
          <readoutUnit name="EpilepticSeizure">
            <classification>
              <networks>
                <ff>
                  <activationIdentity/>
                  <hiddenLayers>
                    <layer neurons="20">
                      <activationTanH/>
                    </layer>
                    <layer neurons="20">
                      <activationTanH/>
                    </layer>
                  </hiddenLayers>
                  <resPropTrainer attempts="2" attemptEpochs="1000"/>
                </ff>
              </networks>
            </classification>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>

  <!--
    The best algorithm called COTE, referenced at the dataset's home site, exhibits accuracy 81.4%.
    It is much better than the results of StateMachine (69%). This is a good case for finding other ways to improve StateMachine :-)
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=CricketX.
    The series Cricket X, Y and Z are accelerometer data (in three dimensions) taken from actors performing cricket gestures.
    The twelve classes are different umpire signals: Cancel Call, Dead Ball, Four, Last Hour Leg Bye, No Ball, One Short, Out,
    Penalty Runs, Six, TV Replay, and Wide. They mounted two accelerometers orthogonal to each other, thus acceleration is measured
    in 3D space. The accelerometers are housed in a small wrist watch sized enclosure worn in the form of a wrist band.
    Taken together the data is a multivariate time series classificatin problem, but the serise are not alligned so in its current
    format cannot be used s such Segmentation of intentional gestures for sports video annotation, Online Context Recognition in Multisensor Systems using Dynamic Time Warping.
    The data are multi-dimensional, but they are not aligned, so it is not possible.
  -->
  <case name="Classification task CricketX: pure ESN reservoir generating FiringFadingSum predictors, one Identity neuron as a classifier (Resilient trainer)">
    <samples trainingData="CricketX_train.csv" verificationData="CricketX_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor predictorsReductionRatio="0">
        <inputEncoder>
          <feedingPatterned bidir="true" routeToReadout="false" variablesSchema="Sequential">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Accel" routeToReadout="true">
                <realFeature />
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PoolMain">
                <proportions dimX="400" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <analogGroup name="TanH-grp" relShare="1" firingThreshold="0.00125">
                    <activationTanH/>
                  </analogGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="true"/>
                  <chainSchema/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Accel" poolName="PoolMain" analogTargetDensity="0.25" signalingRestriction="NoRestriction"/>
            </inputConnections>
            <synapse>
              <analogTarget spectralRadius="0.9999">
                <input maxDelay="50">
                  <analogSource>
                    <weight min="0" max="1.5"/>
                  </analogSource>
                </input>
                <indifferent maxDelay="0"/>
              </analogTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
              <params>
                <activationMWAvg window="300" weights="Constant"/>
                <firingFadingSum strength="0.005"/>
                <firingCount window="300"/>
              </params>
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationIdentity/>
              <resPropTrainer attempts="5" attemptEpochs="1000"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="Cancel Call">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Dead Ball">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Four">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Last Hour">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Leg Bye">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="No Ball">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="One Short">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Out">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Penalty Runs">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Six">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="TV Replay">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Wide">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>


  <!--
    The best algorithm called COTE, referenced at the dataset's home site, exhibits accuracy 81.4%.
    It is much better than the results of StateMachine (69%). This is a good case for finding other ways to improve StateMachine :-)
    "Anthony Bagnall, Jason Lines, William Vickers and Eamonn Keogh, The UEA & UCR Time Series Classification Repository, www.timeseriesclassification.com"
    https://timeseriesclassification.com/description.php?Dataset=CricketX.
    The series Cricket X, Y and Z are accelerometer data (in three dimensions) taken from actors performing cricket gestures.
    The twelve classes are different umpire signals: Cancel Call, Dead Ball, Four, Last Hour Leg Bye, No Ball, One Short, Out,
    Penalty Runs, Six, TV Replay, and Wide. They mounted two accelerometers orthogonal to each other, thus acceleration is measured
    in 3D space. The accelerometers are housed in a small wrist watch sized enclosure worn in the form of a wrist band.
    Taken together the data is a multivariate time series classificatin problem, but the serise are not alligned so in its current
    format cannot be used s such Segmentation of intentional gestures for sports video annotation, Online Context Recognition in Multisensor Systems using Dynamic Time Warping.
    The data are multi-dimensional, but they are not aligned, so it is not possible.
  -->
  <case name="Classification task CricketX: pure ESN reservoir generating FiringFadingSum predictors, one Identity neuron as a classifier (Resilient trainer)">
    <samples trainingData="CricketX_train.csv" verificationData="CricketX_verify.csv"/>
    <stateMachine randomizerSeek="0">
      <neuralPreprocessor predictorsReductionRatio="0">
        <inputEncoder>
          <feedingPatterned bidir="false" routeToReadout="false" variablesSchema="Sequential">
            <unification unifyAmplitude="false" detrend="false">
              <resampling signalBeginThreshold="0" signalEndThreshold="0" uniformTimeScale="true" targetTimePoints="Auto"/>
            </unification>
          </feedingPatterned>
          <fields>
            <externalFields>
              <field name="Accel">
                <realFeature />
                <spikeCode componentHalfCodeLength="20" signalComponent="true" deltaComponent="true"/>
              </field>
            </externalFields>
          </fields>
        </inputEncoder>
        <reservoirStructures>
          <reservoirStructure name="MainCfg">
            <pools>
              <pool name="PoolMain">
                <proportions dimX="100" dimY="1" dimZ="1"/>
                <neuronGroups>
                  <spikingGroup name="grp1" relShare="1">
                    <activationAdExpIF solverCompSteps="2" solverMethod="Euler"/>
                    <homogenousExcitability excitatoryStrength="0.75" inputRatio="0.67" inhibitoryRatio="0.25"/>
                  </spikingGroup>
                </neuronGroups>
                <interconnection>
                  <randomSchema density="0.1" avgDistance="NA" allowSelfConnection="false"/>
                </interconnection>
              </pool>
            </pools>
          </reservoirStructure>
        </reservoirStructures>
        <reservoirInstances>
          <reservoirInstance name="Main" reservoirStructure="MainCfg">
            <inputConnections>
              <connection inputFieldName="Accel" poolName="PoolMain"  spikingTargetDensity="1" signalingRestriction="NoRestriction"/>
            </inputConnections>
            <synapse>
              <spikingTarget>
                <input maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </input>
                <excitatory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </excitatory>
                <inhibitory maxDelay="0">
                  <spikingSource>
                    <plasticity>
                      <constantDynamics/>
                    </plasticity>
                  </spikingSource>
                </inhibitory>
              </spikingTarget>
            </synapse>
            <predictors activation="false"
                        activationSquare="false"
                        activationFadingSum="false"
                        activationMWAvg="false"
                        firingFadingSum="true"
                        firingMWAvg="false"
                        firingCount="false"
                        firingBinPattern="false">
              <params>
                <activationMWAvg window="300" weights="Constant"/>
                <firingFadingSum strength="0.005"/>
                <firingCount window="300"/>
              </params>
            </predictors>
          </reservoirInstance>
        </reservoirInstances>
      </neuralPreprocessor>
      <readoutLayer testDataRatio="0.1" folds="Auto" repetitions="1">
        <defaultNetworks>
          <classification>
            <ff>
              <activationElliot/>
              <resPropTrainer attempts="5" attemptEpochs="1000"/>
            </ff>
          </classification>
        </defaultNetworks>
        <readoutUnits>
          <readoutUnit name="Cancel Call">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Dead Ball">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Four">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Last Hour">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Leg Bye">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="No Ball">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="One Short">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Out">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Penalty Runs">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Six">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="TV Replay">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
          <readoutUnit name="Wide">
            <classification oneWinnerGroupName="Gesture"/>
          </readoutUnit>
        </readoutUnits>
      </readoutLayer>
    </stateMachine>
  </case>




</demo>


